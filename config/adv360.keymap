
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/backlight.h>

/ {
    behaviors {
      #include "behaviors.dtsi"
      #include "macros.dtsi"
    };
    combos {
      #include "combos.dtsi"
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
    &none      &none  &kp LEFT_BRACKET  &kp RIGHT_BRACKET   &kp BACKSLASH     &ctrl_cx            &sl 1                                                                             &sl 1  &kp LG(V)         &kp EXCL       &kp LPAR        &kp RPAR     &none          &none
    &none      &kp Q             &kp W              &kp E           &kp R        &kp T        &kp PG_UP                                                                      &kp C_VOL_UP      &kp Y            &kp U          &kp I           &kp O     &kp P      &kp EQUAL
  &kp TAB      &kp A             &kp S              &kp D           &kp F        &kp G        &kp PG_DN        &mo 2     &kp LALT                   &kp LALT       &none     &kp C_VOL_DN      &kp H            &kp J          &kp K           &kp L  &kp SEMI        &kp SQT
    &mo 3      &kp Z             &kp X              &kp C           &kp V        &kp B                                    &kp ESC                      &none                                   &kp N            &kp M      &kp COMMA         &kp DOT  &kp FSLH          &none
 &eng_rus  &kp GRAVE           &kp ESC         &left_home      &right_end              &stht LCTRL LCMD    &kp SPACE   &kp LSHIFT                      &none       &mo 2   &kp LEFT_SHIFT                    &dn_pgdn       &up_pgup       &kp MINUS     &none          &none
            >;
        };

        layer_mod {
            bindings = <
  &none    &none    &none  &kp LS(LG(NUMBER_3))  &kp LS(LG(NUMBER_4))   &none                   &none                                                                 &none   &none   &none   &none   &none    &none       &none
  &none  &kp F11  &kp F12                 &none                 &none   &none            &bt BT_SEL 0                                                                 &none   &none   &none   &none   &none    &none       &none
  &none   &kp F1   &kp F2                &kp F3                &kp F4  &kp F5            &bt BT_SEL 1  &bt BT_CLR  &bootloader                  &bootloader   &none   &none  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10       &none
 &tog 3    &none    &none                 &none                 &none   &none                                            &none                        &none                   &none   &none   &none   &none    &none       &none
  &none    &none    &none                 &none                 &none                           &none       &none        &none                        &none   &to 2   &none           &none   &none   &none    &none  &bl BL_TOG
            >;
        };

        layer_num_sym {
            bindings = <
  &to 0     &none    &none     &none     &none      &none            &trans                                                  &trans      &none     &none     &none      &none      &none   &none
 &trans  &kp EXCL   &kp AT  &kp HASH  &kp DLLR  &kp PRCNT            &trans                                                  &trans  &kp CARET  &kp AMPS  &kp STAR  &kp GRAVE  &kp TILDE  &trans
 &trans    &kp N1   &kp N2    &kp N3    &kp N4     &kp N5            &trans  &trans  &trans                  &trans  &trans  &trans     &kp N6    &kp N7    &kp N8     &kp N9     &kp N0  &trans
 &trans    &trans   &trans    &trans    &trans     &trans                            &trans                  &trans                      &none  &kp LPAR  &kp RPAR     &trans     &trans  &trans
 &trans    &trans   &trans    &trans    &trans                       &trans  &trans  &trans                  &trans  &trans  &trans               &trans    &trans     &trans     &trans  &trans
            >;
        };

        layer_arrows {
            bindings = <
  &to 0     &trans          &trans         &trans         &trans         &trans            &trans                                               &trans        &trans         &trans        &trans         &trans          &trans    &trans
 &trans      &none           &none          &none          &none          &none            &trans                                      &kp K_SCROLL_UP         &none          &none         &none          &none           &none    &trans
 &trans  &kp LG(A)  &kp LEFT_SHIFT      &arr_bspc        &kp DEL          &none            &trans  &trans  &trans       &trans  &trans &kp K_SCROLL_DOWN   &macro_yh      &macro_yj     &macro_yk      &macro_yl    &macro_ysemi    &trans
 &trans  &kp LG(Z)       &kp LG(X)      &kp LG(C)      &kp LG(V)      &kp LG(A)                            &trans       &trans                                 &none        &ctrl_1       &ctrl_2        &ctrl_3         &ctrl_4    &trans
 &trans     &trans          &trans         &trans         &trans                           &trans  &trans  &trans       &trans   &none                                       &trans        &trans         &trans          &trans    &trans
            >;
        };

    };
};
